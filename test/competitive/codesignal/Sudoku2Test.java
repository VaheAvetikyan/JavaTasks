package competitive.codesignal;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class Sudoku2Test {

    @Test
    void testSolutionTrue() {
        Sudoku2 sudoku = new Sudoku2();
        char[][] grid = {
                {'.', '.', '.', '1', '4', '.', '.', '2', '.'},
                {'.', '.', '6', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '1', '.', '.', '.', '.', '.', '.'},
                {'.', '6', '7', '.', '.', '.', '.', '.', '9'},
                {'.', '.', '.', '.', '.', '.', '8', '1', '.'},
                {'.', '3', '.', '.', '.', '.', '.', '.', '6'},
                {'.', '.', '.', '.', '.', '7', '.', '.', '.'},
                {'.', '.', '.', '5', '.', '.', '.', '7', '.'}
        };
        assertTrue(sudoku.solution(grid));

        char[][] grid1 = {
                {'.', '.', '.', '.', '.', '.', '.', '.', '2'},
                {'.', '.', '.', '.', '.', '.', '6', '.', '.'},
                {'.', '.', '1', '4', '.', '.', '8', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '3', '.', '.', '.', '.'},
                {'5', '.', '8', '6', '.', '.', '.', '.', '.'},
                {'.', '9', '.', '.', '.', '.', '4', '.', '.'},
                {'.', '.', '.', '.', '5', '.', '.', '.', '.'}
        };
        assertTrue(sudoku.solution(grid1));
    }

    @Test
    void testSolutionFalse() {
        Sudoku2 sudoku = new Sudoku2();
        char[][] grid2 = {
                {'.', '.', '.', '.', '2', '.', '.', '9', '.'},
                {'.', '.', '.', '.', '6', '.', '.', '.', '.'},
                {'7', '1', '.', '.', '7', '5', '.', '.', '.'},
                {'.', '7', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '8', '3', '.', '.', '.'},
                {'.', '.', '8', '.', '.', '7', '.', '6', '.'},
                {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
                {'.', '1', '.', '2', '.', '.', '.', '.', '.'},
                {'.', '2', '.', '.', '3', '.', '.', '.', '.'}
        };
        assertFalse(sudoku.solution(grid2));

        char[][] grid3 = {
                {'.', '4', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '4', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '1', '.', '.', '7', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '3', '.', '.', '.', '6', '.'},
                {'.', '.', '.', '.', '.', '6', '.', '9', '.'},
                {'.', '.', '.', '.', '1', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '2', '.', '.'},
                {'.', '.', '.', '8', '.', '.', '.', '.', '.'}
        };
        assertFalse(sudoku.solution(grid3));

        char[][] grid4 = {
                {'.', '.', '.', '.', '.', '.', '5', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'9', '3', '.', '.', '2', '.', '4', '.', '.'},
                {'.', '.', '7', '.', '.', '.', '3', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '3', '4', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '3', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '5', '2', '.', '.'}
        };
        assertFalse(sudoku.solution(grid4));

        char[][] grid5 = {
                {'.', '.', '5', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '8', '.', '.', '.', '3', '.'},
                {'.', '5', '.', '.', '2', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '9'},
                {'.', '.', '.', '.', '.', '.', '4', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '.', '.', '7'},
                {'.', '1', '.', '.', '.', '.', '.', '.', '.'},
                {'2', '4', '.', '.', '.', '.', '9', '.', '.'}
        };
        assertFalse(sudoku.solution(grid5));
    }

    @Test
    void testSolutionException() {
        Sudoku2 sudoku = new Sudoku2();
        assertThrows(NullPointerException.class, () -> sudoku.solution(null));
    }
}
